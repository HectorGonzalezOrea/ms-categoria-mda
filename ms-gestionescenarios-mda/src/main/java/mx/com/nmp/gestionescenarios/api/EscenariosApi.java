/**
 * NOTE: This class is auto generated by the swagger code generator program (2.4.12).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package mx.com.nmp.gestionescenarios.api;


import javax.validation.Valid;
import javax.validation.constraints.NotNull;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;

import io.swagger.annotations.Api;
import io.swagger.annotations.ApiOperation;
import io.swagger.annotations.ApiParam;
import io.swagger.annotations.ApiResponse;
import io.swagger.annotations.ApiResponses;
import io.swagger.annotations.Authorization;
import mx.com.nmp.gestionescenarios.model.BadRequest;
import mx.com.nmp.gestionescenarios.model.Escenarios;
import mx.com.nmp.gestionescenarios.model.EstatusRegla;
import mx.com.nmp.gestionescenarios.model.GeneralResponse;
import mx.com.nmp.gestionescenarios.model.InfoRegla;
import mx.com.nmp.gestionescenarios.model.InternalServerError;
import mx.com.nmp.gestionescenarios.model.InvalidAuthentication;
import mx.com.nmp.gestionescenarios.model.ListaInfoGeneralRegla;
import mx.com.nmp.gestionescenarios.model.ListaMonedas;
import mx.com.nmp.gestionescenarios.model.ModificarValorAnclaOroDolar;
import mx.com.nmp.gestionescenarios.model.ValorAnclaOroDolar;
@javax.annotation.Generated(value = "io.swagger.codegen.languages.SpringCodegen", date = "2020-03-20T16:07:47.599Z")

@Api(value = "escenarios", description = "the escenarios API")
public interface EscenariosApi {

    @ApiOperation(value = "Obtener el valor ancla de Oro y Dolar actual", nickname = "escenariosAnclaOroDolarGet", notes = "Obtener el valor ancla de Oro y Dolar actual. ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = ValorAnclaOroDolar.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Consulta exitosa", response = ValorAnclaOroDolar.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/ancla/oroDolar",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> escenariosAnclaOroDolarGet(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario);
    //ResponseEntity<ValorAnclaOroDolar> escenariosAnclaOroDolarGet(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario);


    @ApiOperation(value = "Solicitar cambio de valores ancla para Oro y Dolar", nickname = "escenariosAnclaOroDolarPost", notes = "Solicitar cambio de valores anlca para Oro y Dolar al área encargada ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Alta exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/ancla/oroDolar",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    //ResponseEntity<GeneralResponse> escenariosAnclaOroDolarPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody ModificarValorAnclaOroDolar peticion);
    ResponseEntity<?> escenariosAnclaOroDolarPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody ModificarValorAnclaOroDolar peticion);

    @ApiOperation(value = "Almacenar o procesar los documentos excel de consolidados", nickname = "escenariosConsolidadosArchivoPost", notes = "Almacena o procesa el archivo Excel que contiene la información de consolidados. Cuando se realiza un ajuste emergente, el archivo es almacenado hasta su ejecución, después se elimina de la lista de archivos consolidados.  ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Procesamiento de archivo en curso", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/consolidados/archivo",
        produces = { "application/json" }, 
        consumes = { "multipart/form-data" },
        method = RequestMethod.POST)
    //ResponseEntity<GeneralResponse> escenariosConsolidadosArchivoPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Archivo CSV de consolidados") @Valid @RequestPart(value="adjunto", required=true) MultipartFile adjunto,@ApiParam(value = "Fecha de vigencia para el ajuste" ,required=true) @RequestHeader(value="vigencia", required=true) LocalDate vigencia,@ApiParam(value = "Nombre del ajuste" ,required=true) @RequestHeader(value="nombreAjuste", required=true) String nombreAjuste,@ApiParam(value = "Flag para indicar si el ajuste es emergente" ,required=true) @RequestHeader(value="emergente", required=true) Boolean emergente);
    ResponseEntity<?> escenariosConsolidadosArchivoPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Archivo CSV de consolidados") @Valid @RequestPart(value="adjunto", required=true) MultipartFile adjunto,@ApiParam(value = "Fecha de vigencia para el ajuste" ,required=true) @RequestHeader(value="vigencia", required=true) String vigencia,@ApiParam(value = "Nombre del ajuste" ,required=true) @RequestHeader(value="nombreAjuste", required=true) String nombreAjuste,@ApiParam(value = "Flag para indicar si el ajuste es emergente" ,required=true) @RequestHeader(value="emergente", required=true) Boolean emergente);


    @ApiOperation(value = "Obtener la configuración de las monedas", nickname = "escenariosMonedasGet", notes = "Obtener la configuración de las monedas configuradas por el usuario mediante el parámetro oro ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = ListaMonedas.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Consulta exitosa", response = ListaMonedas.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/monedas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> escenariosMonedasGet(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@NotNull @ApiParam(value = "Flag para indicar si se consultan las monedas oro o sin oro", required = true) @Valid @RequestParam(value = "oro", required = true) Boolean oro);


    @ApiOperation(value = "Actualizar la configuración de Monedas", nickname = "escenariosMonedasPatch", notes = "Actualizar la configuración de las Monedas ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Modificación exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/monedas",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<?> escenariosMonedasPatch(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody ListaMonedas peticion);


    @ApiOperation(value = "Almacenar configuración de Monedas", nickname = "escenariosMonedasPost", notes = "Almacenar la configuración de las Monedas ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Alta exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/monedas",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> escenariosMonedasPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody ListaMonedas peticion);


    @ApiOperation(value = "Ejecutar un escenario", nickname = "escenariosPost", notes = "Ejecutar un escenario, los cuales pueden ser: * Dinámicos * Consolidados * Valor Ancla * Monedas con Oro * Monedas sin Oro ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Inicio de ejecución de escenario exitoso", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> escenariosPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody Escenarios peticion);


    @ApiOperation(value = "Actualizar el estatus de una regla", nickname = "escenariosReglasEstatusPut", notes = "Actualiza el estatus de una regla. ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Actualización de estatus exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas/estatus",
        produces = { "application/json" }, 
        method = RequestMethod.PUT)
    ResponseEntity<?> escenariosReglasEstatusPut(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody EstatusRegla peticion);


    @ApiOperation(value = "Obtener la lista de reglas configuradas", nickname = "escenariosReglasGet", notes = "Obtener la lista de reglas configuradas por el usuario mediante los parámetros:    * Nombre de la regla   * Ramo   * Subramo   * Factor   * Origen   * Clasificación de Clientes   * Estatus de la partida   * Canal de Comercialización   * Fecha de aplicación ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = ListaInfoGeneralRegla.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Consulta de reglas exitosa", response = ListaInfoGeneralRegla.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> escenariosReglasGet(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Nombre de las reglas a buscar") @Valid @RequestParam(value = "nombre", required = false) String nombre,@ApiParam(value = "Ramo de las reglas a buscar") @Valid @RequestParam(value = "ramo", required = false) String ramo,@ApiParam(value = "Subramo de las reglas a buscar") @Valid @RequestParam(value = "subramo", required = false) String subramo,@ApiParam(value = "Factor de las reglas a buscar") @Valid @RequestParam(value = "factor", required = false) String factor,@ApiParam(value = "Categoria") @Valid @RequestParam(value = "categoria", required = false) String categoria, @ApiParam(value = "Origen de las partidas") @Valid @RequestParam(value = "origen", required = false) String origen,@ApiParam(value = "Clasificación de los clientes") @Valid @RequestParam(value = "clasificacionClientes", required = false) String clasificacionClientes,@ApiParam(value = "Estatus de la partida") @Valid @RequestParam(value = "estatusPartida", required = false) String estatusPartida,@ApiParam(value = "Canal de comrcialización") @Valid @RequestParam(value = "canalComrcializacion", required = false) String canalComrcializacion,@ApiParam(value = "Fecha de aplicación") @Valid @RequestParam(value = "fechaAplicacion", required = false) String fechaAplicacion);


    @ApiOperation(value = "Eliminar una regla", nickname = "escenariosReglasIdReglaDelete", notes = "Obtiene la configuración de una regla por medio del parámetro idRegla ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = InfoRegla.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Eliminación de regla exitoso", response = InfoRegla.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas/{idRegla}",
        produces = { "application/json" }, 
        method = RequestMethod.DELETE)
    ResponseEntity<?> escenariosReglasIdReglaDelete(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "",required=true) @PathVariable("idRegla") Integer idRegla);


    @ApiOperation(value = "Obtener la configuración de una regla", nickname = "escenariosReglasIdReglaGet", notes = "Obtiene la configuración de una regla por medio del parámetro idRegla ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = InfoRegla.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Consulta de regla exitosa", response = InfoRegla.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas/{idRegla}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    ResponseEntity<?> escenariosReglasIdReglaGet(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "",required=true) @PathVariable("idRegla") Integer idRegla);


    @ApiOperation(value = "Actualizar una regla para su posterior ejecución", nickname = "escenariosReglasPatch", notes = "Actualiza una regla para su posterior ejecución. ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Alta exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas",
        produces = { "application/json" }, 
        method = RequestMethod.PATCH)
    ResponseEntity<?> escenariosReglasPatch(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody InfoRegla peticion);


    @ApiOperation(value = "Almacenar una nueva regla para su posterior ejecución", nickname = "escenariosReglasPost", notes = "Almacenar una nueva regla para su posterior ejecución. ### Relevantes Se deben de aplicar las reglas de negocio descritas dentro del DF02, sección 4.1.6.3 Aplicar Descuento ### Seguridad Para poder realizar el consumo del recuros deberá de estar autorizado. Para esto tiene que enviar la llave en el encabezado HTTP: * 'X-API-KEY: eyJ4NXQjUzI1NiI6IkFTS1ESG42` ", response = GeneralResponse.class, authorizations = {
        @Authorization(value = "apiKey")
    }, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Alta exitosa", response = GeneralResponse.class),
        @ApiResponse(code = 400, message = "Error en el mensaje de petición, verifique la información", response = BadRequest.class),
        @ApiResponse(code = 401, message = "Error de autorización en el uso del recurso", response = InvalidAuthentication.class),
        @ApiResponse(code = 500, message = "Error interno del servidor", response = InternalServerError.class) })
    @RequestMapping(value = "/escenarios/reglas",
        produces = { "application/json" }, 
        method = RequestMethod.POST)
    ResponseEntity<?> escenariosReglasPost(@ApiParam(value = "Usuario de sistema que lanza la petición" ,required=true) @RequestHeader(value="usuario", required=true) String usuario,@ApiParam(value = "Cuerpo de la petición" ,required=true )  @Valid @RequestBody InfoRegla peticion);

}
